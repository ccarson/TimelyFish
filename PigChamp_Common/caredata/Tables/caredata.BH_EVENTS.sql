CREATE TABLE [caredata].[BH_EVENTS] (
    [event_id]           INT          IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [site_id]            INT          NOT NULL,
    [identity_id]        INT          NOT NULL,
    [parity]             TINYINT      NULL,
    [event_type]         SMALLINT     NOT NULL,
    [eventdate]          DATETIME     NULL,
    [supervisor_id]      INT          NULL,
    [condition_score_id] INT          NULL,
    [autogenerated]      BIT          CONSTRAINT [DF_BH_EVENTS_autogenerated] DEFAULT ((0)) NOT NULL,
    [location_id]        INT          NULL,
    [creation_date]      DATETIME     CONSTRAINT [DF_BH_EVENTS_creation_date] DEFAULT (getdate()) NOT NULL,
    [created_by]         VARCHAR (15) CONSTRAINT [DF_BH_EVENTS_created_by] DEFAULT ('SYSTEM') NOT NULL,
    [last_update_date]   DATETIME     NULL,
    [last_update_by]     VARCHAR (15) NULL,
    [deletion_date]      DATETIME     NULL,
    [deleted_by]         VARCHAR (15) NULL,
    CONSTRAINT [PK_BH_EVENTS] PRIMARY KEY CLUSTERED ([event_id] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [FK_BH_EVENTS_BH_IDENTITIES_0] FOREIGN KEY ([identity_id]) REFERENCES [caredata].[BH_IDENTITIES] ([identity_id]) ON DELETE CASCADE,
    CONSTRAINT [FK_BH_EVENTS_COMMON_LOOKUPS_2] FOREIGN KEY ([condition_score_id]) REFERENCES [caredata].[COMMON_LOOKUPS] ([lookup_id]) ON UPDATE CASCADE,
    CONSTRAINT [FK_BH_EVENTS_LOCATIONS_3] FOREIGN KEY ([location_id]) REFERENCES [caredata].[LOCATIONS] ([location_id]) ON UPDATE CASCADE,
    CONSTRAINT [FK_BH_EVENTS_SUPERVISORS_1] FOREIGN KEY ([supervisor_id]) REFERENCES [caredata].[SUPERVISORS] ([supervisor_id]) ON UPDATE CASCADE
);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_0]
    ON [caredata].[BH_EVENTS]([eventdate] ASC, [event_type] ASC, [site_id] ASC) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_1]
    ON [caredata].[BH_EVENTS]([deletion_date] ASC, [event_type] ASC)
    INCLUDE([event_id], [identity_id]) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_LogonA]
    ON [caredata].[BH_EVENTS]([deletion_date] ASC, [event_type] ASC)
    INCLUDE([identity_id]) WHERE (([event_type] IN ((298), (299), (300), (301))) AND [deletion_date] IS NULL) WITH (FILLFACTOR = 100);


GO
ALTER INDEX [IDX_BH_EVENTS_LogonA]
    ON [caredata].[BH_EVENTS] DISABLE;


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_8]
    ON [caredata].[BH_EVENTS]([site_id] ASC, [deletion_date] ASC, [eventdate] ASC) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_9]
    ON [caredata].[BH_EVENTS]([site_id] ASC, [event_type] ASC, [deletion_date] ASC, [eventdate] ASC)
    INCLUDE([identity_id]) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_10]
    ON [caredata].[BH_EVENTS]([identity_id] ASC, [eventdate] ASC, [event_type] ASC)
    INCLUDE([supervisor_id], [condition_score_id], [creation_date], [last_update_date], [deletion_date], [autogenerated], [location_id], [event_id], [site_id]) WITH (FILLFACTOR = 100);


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_BH_EVENTS_11]
    ON [caredata].[BH_EVENTS]([event_id] ASC)
    INCLUDE([site_id]) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_13]
    ON [caredata].[BH_EVENTS]([event_type] ASC, [deletion_date] ASC, [eventdate] ASC)
    INCLUDE([event_id], [identity_id]) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_LogonB]
    ON [caredata].[BH_EVENTS]([deletion_date] ASC, [event_type] ASC)
    INCLUDE([identity_id]) WHERE (([event_type] IN ((100), (160), (110), (150))) AND [deletion_date] IS NULL) WITH (FILLFACTOR = 100);


GO
ALTER INDEX [IDX_BH_EVENTS_LogonB]
    ON [caredata].[BH_EVENTS] DISABLE;


GO
CREATE NONCLUSTERED INDEX [IDX_BH_EVENTS_15]
    ON [caredata].[BH_EVENTS]([identity_id] ASC, [deletion_date] ASC, [event_type] ASC)
    INCLUDE([eventdate]) WITH (FILLFACTOR = 100);


GO
CREATE NONCLUSTERED INDEX [idx_bh_events_10_mod]
    ON [caredata].[BH_EVENTS]([identity_id] ASC, [event_type] ASC, [eventdate] ASC, [deletion_date] ASC)
    INCLUDE([creation_date], [event_id], [last_update_date]) WITH (FILLFACTOR = 100);


GO
CREATE TRIGGER [caredata].[UPDATE_AUDIT_TIME] ON caredata.bh_events AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @rowcount int, @identity_id int, @audit_time datetime
	SET @rowcount = @@rowcount
	SET	NOCOUNT ON;
	IF @rowcount > 1
	BEGIN
    RETURN
	END
  SELECT @identity_id = IsNull(i.identity_id, d.identity_id)
    FROM inserted i LEFT OUTER JOIN deleted d ON d.event_id = i.event_id
  SELECT @audit_time = MAX(a.audit_date)
    FROM (SELECT MAX(creation_date) audit_date
            FROM caredata.bh_events
           WHERE creation_date IS NOT NULL
             and identity_id = @identity_id
           UNION
          SELECT MAX(last_update_date) audit_date
            FROM caredata.bh_events
           WHERE last_update_date IS NOT NULL
             and identity_id = @identity_id
           UNION
          SELECT MAX(deletion_date) audit_date
            FROM caredata.bh_events
           WHERE deletion_date IS NOT NULL
             and identity_id = @identity_id
           ) a
  UPDATE caredata.bh_identities
     SET audit_time = @audit_time
   WHERE identity_id = @identity_id
END

GO

/*
20140217      sripley       altered the cft_sowparity table to include additional columns and modified the trigger to include the columns and more correctly gather the data for the insert.
20141208      sripley made it an insert,update trigger
*/

CREATE TRIGGER [caredata].[trUpd_cft_SowParity] ON [caredata].[BH_EVENTS] 
after insert, update -- added updated 20141208
AS
Set nocount on;

SET ANSI_WARNINGS OFF;
BEGIN TRAN

declare @site_id int, @identity_id int, @event_id int, @event_type smallint

select @site_id = site_id, @identity_id = identity_id
, @event_type = event_type 
from inserted

IF @event_type in (100,110,170)
       BEGIN

       -- remove pre-existing rows for a sow at a site.
       delete from dbo.cft_sowparity
       where identity_id = @identity_id


       -- rebuild the sow/site parity data

insert into dbo.cft_sowparity     
select 
farm.site_id, s.identity_id
, case when be.event_type in (100,110) then be.event_id       
          when be.event_type = 170                 then far01.event_id
  end event_id
, case when be.event_type in (100,110) then be.eventdate
          when be.event_type = 170                 then far01.eventdate
  end eventdate
, case when be.event_type in (100,110) then CASE WHEN be.[eventdate]is null THEN null ELSE  DateAdd(d, - (DatePart(dw,be.[eventdate]) -1), be.[eventdate]) END
          when be.event_type = 170                 then far01.weekofdate
  end weekofdate
, case when be.event_type in (100,110) then isnull(s.starting_parity,0)
       when be.event_type = 170 then isnull(s.starting_parity,0) + isnull(far01.parity,294)
  end parity  
, far02.eventdate as enddate, far02.weekofdate as endweek
, SUBSTRING(farm.[farm_name],1,8) AS FarmID
, SUBSTRING(IH.[primary_identity],1,12) as SowID
, case when be.event_type in (100,110) then be.event_type
          when be.event_type = 170                 then far01.event_type
  end event_type
from caredata.HDR_SOWS     s (Nolock)                 -- starting_parity (null is gilt, 0 is bred gilt, > 0 sow)
inner join [caredata].[BH_IDENTITY_HISTORY] IH (NOLOCK) 
                     on ih.identity_id = s.identity_id and ih.deletion_date is null
inner join [careglobal].[FARMS] farm (NOLOCK) on IH.site_id = farm.[site_id] 
inner join  caredata.bh_events be (NOLOCK)
                     on be.[event_type] in (100,110,170) and be.[deletion_date] is NULL
                     and be.identity_id = s.identity_id and be.site_Id = ih.site_id       
left join
(select be.site_id, be.identity_id, be.event_id
      , be.eventdate, be.event_type
      ,CASE WHEN be.[eventdate]is null THEN null ELSE  DateAdd(d, - (DatePart(dw,be.[eventdate]) -1), be.[eventdate]) END as WeekOfDate
         , row_number() over(partition by be.identity_id  order by be.eventdate) as parity
              from caredata.bh_events be (NOLOCK)
              where be.[event_type] = 170 and be.[deletion_date] is NULL and identity_id = @identity_id) far01
                     on far01.identity_id = s.identity_id and far01.site_Id = ih.site_id and far01.event_id = be.event_id
left join
(select site_id, identity_id, event_id
      , dateadd(d,-1,eventdate) as eventdate, event_type
      ,CASE WHEN [eventdate] is null THEN null ELSE  DateAdd(d, - (DatePart(dw,dateadd(d,-1,eventdate)) -1), dateadd(d,-1,eventdate)) END as WeekOfDate
         , row_number() over(partition by identity_id  order by eventdate) as parity
              from caredata.bh_events  (NOLOCK)
              where [event_type] = 170 and [deletion_date] is NULL and identity_id = @identity_id) far02
                     on far02.identity_id = far01.identity_id and far02.parity = far01.parity + 1  and far02.site_Id = far01.site_id
where s.identity_id = @identity_id
order by s.identity_id, far01.eventdate
       
       --END
       
--IF @event_type in (170)
--     BEGIN
       
       update p
              set enddate = p2.eventdate - 1 , endweek = DateAdd(d, - (DatePart(dw,dateadd(d,-1,p2.eventdate - 1)) -1), dateadd(d,-1,p2.eventdate - 1))
       from dbo.cft_sowparity as p
       join dbo.cft_sowparity as p2
              on     p2.identity_id = p.identity_id and p2.parity = p.parity + 1
       where p.event_type in (100,110,170)
       and p.enddate is null
       and p.identity_id = @identity_id

       
       END



COMMIT TRAN 

set nocount off

