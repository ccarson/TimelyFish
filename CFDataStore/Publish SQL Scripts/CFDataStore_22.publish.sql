/*
Deployment script for CFDataStore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar MobileFrame "MobileFrame"
:setvar MobileFrameServer "CFSE-MF01T"
:setvar DatabaseName "CFDataStore"
:setvar DefaultFilePrefix "CFDataStore"
:setvar DefaultDataPath "F:\DB\"
:setvar DefaultLogPath "G:\DB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dimension].[MatingGroup].[EndDateKey] is being dropped, data loss could occur.

The column [dimension].[MatingGroup].[FarmKey] on table [dimension].[MatingGroup] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dimension].[MatingGroup].[SourceCode] on table [dimension].[MatingGroup] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dimension].[MatingGroup].[SourceGUID] on table [dimension].[MatingGroup] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dimension].[MatingGroup].[SourceID] on table [dimension].[MatingGroup] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dimension].[MatingGroup])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [fact].[MatingEvent].[ParityServiceNumber] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [fact].[MatingEvent])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [stage].[CFT_ANIMAL].[ACTIVE] is being dropped, data loss could occur.

The column [stage].[CFT_ANIMAL].[DEVICEFARMID] is being dropped, data loss could occur.

The column [stage].[CFT_ANIMAL].[MFSYNC] is being dropped, data loss could occur.

The column [stage].[CFT_ANIMAL].[PIGCHAMP_ID] is being dropped, data loss could occur.

The column [stage].[CFT_ANIMAL].[PRINTFLAG] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [stage].[CFT_ANIMAL])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [stage].[HDR_SOWS].[service_date] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [stage].[HDR_SOWS])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dimension].[MatingGroup]...';


GO
ALTER TABLE [dimension].[MatingGroup] DROP CONSTRAINT [DF__MatingGro__Creat__351DDF8C];


GO
PRINT N'Dropping unnamed constraint on [dimension].[MatingGroup]...';


GO
ALTER TABLE [dimension].[MatingGroup] DROP CONSTRAINT [DF__MatingGro__Creat__3429BB53];


GO
PRINT N'Dropping [stage].[vw_Sow]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
DROP VIEW [stage].[vw_Sow];


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Starting rebuilding table [dimension].[MatingGroup]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dimension].[tmp_ms_xx_MatingGroup] (
    [MatingGroupKey] BIGINT        IDENTITY (1, 1) NOT NULL,
    [FarmKey]        BIGINT        NOT NULL,
    [MatingGroup]    NVARCHAR (20) NOT NULL,
    [StartDateKey]   INT           NOT NULL,
    [CreatedDate]    DATETIME      DEFAULT (getdate()) NOT NULL,
    [CreatedBy]      BIGINT        DEFAULT ((-1)) NOT NULL,
    [UpdatedDate]    DATETIME      NULL,
    [UpdatedBy]      BIGINT        NULL,
    [DeletedDate]    DATETIME      NULL,
    [DeletedBy]      BIGINT        NULL,
    [SourceCode]     NVARCHAR (20) NOT NULL,
    [SourceID]       INT           NOT NULL,
    [SourceGUID]     NVARCHAR (36) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_MatingGroup1] PRIMARY KEY CLUSTERED ([MatingGroupKey] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dimension].[MatingGroup])
    BEGIN
        SET IDENTITY_INSERT [dimension].[tmp_ms_xx_MatingGroup] ON;
        INSERT INTO [dimension].[tmp_ms_xx_MatingGroup] ([MatingGroupKey], [MatingGroup], [StartDateKey], [CreatedDate], [CreatedBy], [UpdatedDate], [UpdatedBy], [DeletedDate], [DeletedBy])
        SELECT   [MatingGroupKey],
                 [MatingGroup],
                 [StartDateKey],
                 [CreatedDate],
                 [CreatedBy],
                 [UpdatedDate],
                 [UpdatedBy],
                 [DeletedDate],
                 [DeletedBy]
        FROM     [dimension].[MatingGroup]
        ORDER BY [MatingGroupKey] ASC;
        SET IDENTITY_INSERT [dimension].[tmp_ms_xx_MatingGroup] OFF;
    END

DROP TABLE [dimension].[MatingGroup];

EXECUTE sp_rename N'[dimension].[tmp_ms_xx_MatingGroup]', N'MatingGroup';

EXECUTE sp_rename N'[dimension].[tmp_ms_xx_constraint_PK_MatingGroup1]', N'PK_MatingGroup', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
ALTER TABLE [dimension].[MatingGroup] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Altering [fact].[MatingEvent]...';


GO
ALTER TABLE [fact].[MatingEvent] DROP COLUMN [ParityServiceNumber];


GO
PRINT N'Starting rebuilding table [stage].[CFT_ANIMAL]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [stage].[tmp_ms_xx_CFT_ANIMAL] (
    [ID]                NVARCHAR (36) NOT NULL,
    [CREATE_DATE]       DATETIME      NOT NULL,
    [LAST_UPDATE]       DATETIME      NOT NULL,
    [CREATED_BY]        BIGINT        NOT NULL,
    [LAST_UPDATED_BY]   BIGINT        NOT NULL,
    [DELETED_BY]        BIGINT        NOT NULL,
    [BIRTHDATE]         DATETIME      NULL,
    [GENETICSID]        NVARCHAR (36) NULL,
    [STATUS]            INT           NULL,
    [SEX]               NVARCHAR (10) NULL,
    [ORIGIN]            NVARCHAR (50) NULL,
    [STATUSCHANGEDDATE] DATETIME      NULL,
    [SYNCSTATUS]        NVARCHAR (20) NULL,
    [ORIGINID]          NVARCHAR (36) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CFT_ANIMAL_PK1] PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [stage].[CFT_ANIMAL])
    BEGIN
        INSERT INTO [stage].[tmp_ms_xx_CFT_ANIMAL] ([ID], [CREATE_DATE], [LAST_UPDATE], [CREATED_BY], [LAST_UPDATED_BY], [DELETED_BY], [BIRTHDATE], [GENETICSID], [SEX], [ORIGIN], [ORIGINID])
        SELECT   [ID],
                 [CREATE_DATE],
                 [LAST_UPDATE],
                 [CREATED_BY],
                 [LAST_UPDATED_BY],
                 [DELETED_BY],
                 [BIRTHDATE],
                 [GENETICSID],
                 [SEX],
                 [ORIGIN],
                 [ORIGINID]
        FROM     [stage].[CFT_ANIMAL]
        ORDER BY [ID] ASC;
    END

DROP TABLE [stage].[CFT_ANIMAL];

EXECUTE sp_rename N'[stage].[tmp_ms_xx_CFT_ANIMAL]', N'CFT_ANIMAL';

EXECUTE sp_rename N'[stage].[tmp_ms_xx_constraint_CFT_ANIMAL_PK1]', N'CFT_ANIMAL_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [stage].[HDR_SOWS]...';


GO
ALTER TABLE [stage].[HDR_SOWS] DROP COLUMN [SourceGUID], COLUMN [service_date];


GO
ALTER TABLE [stage].[HDR_SOWS]
    ADD [SourceGUID] AS (CONVERT (NVARCHAR (36), [SequentialGUID]));


GO
PRINT N'Creating [stage].[CFT_ANIMALEVENT]...';


GO
CREATE TABLE [stage].[CFT_ANIMALEVENT] (
    [ID]              NVARCHAR (36) NOT NULL,
    [CREATE_DATE]     DATETIME      NOT NULL,
    [LAST_UPDATE]     DATETIME      NOT NULL,
    [CREATED_BY]      BIGINT        NOT NULL,
    [LAST_UPDATED_BY] BIGINT        NOT NULL,
    [DELETED_BY]      BIGINT        NOT NULL,
    [PARITYEVENTID]   NVARCHAR (36) NULL,
    [EVENTTYPEID]     NVARCHAR (36) NULL,
    [EVENTDATE]       DATETIME      NULL,
    [QTY]             INT           NULL,
    [REASONID]        INT           NULL,
    [EVENTTHDATE]     NVARCHAR (10) NULL,
    [SYNCSTATUS]      NVARCHAR (20) NULL,
    [DataStoreID]     BIGINT        NULL,
    CONSTRAINT [CFT_ANIMALEVENT_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [stage].[CFT_FARROWEVENT]...';


GO
CREATE TABLE [stage].[CFT_FARROWEVENT] (
    [ID]              NVARCHAR (36) NOT NULL,
    [CREATE_DATE]     DATETIME      NOT NULL,
    [LAST_UPDATE]     DATETIME      NOT NULL,
    [CREATED_BY]      BIGINT        NOT NULL,
    [LAST_UPDATED_BY] BIGINT        NOT NULL,
    [DELETED_BY]      BIGINT        NOT NULL,
    [PARITYEVENTID]   NVARCHAR (36) NULL,
    [BORNALIVE]       INT           NULL,
    [STILLBORN]       INT           NULL,
    [MUMMY]           INT           NULL,
    [FARROWDATE]      DATETIME      NULL,
    [LOCATIONID]      NVARCHAR (36) NULL,
    [PIGCHAMP_ID]     BIGINT        NULL,
    [GESTATIONLENGTH] INT           NULL,
    [FARROWTHDATE]    NVARCHAR (10) NULL,
    [SYNCSTATUS]      NVARCHAR (20) NULL,
    [MFSYNC]          NVARCHAR (1)  NULL,
    [DataStoreID]     BIGINT        NULL,
    CONSTRAINT [CFT_FARROWEVENT_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [stage].[CFT_GROUPEVENT]...';


GO
CREATE TABLE [stage].[CFT_GROUPEVENT] (
    [ID]              NVARCHAR (36) NOT NULL,
    [CREATE_DATE]     DATETIME      NOT NULL,
    [LAST_UPDATE]     DATETIME      NOT NULL,
    [CREATED_BY]      BIGINT        NOT NULL,
    [LAST_UPDATED_BY] BIGINT        NOT NULL,
    [DELETED_BY]      BIGINT        NOT NULL,
    [STARTDATE]       DATETIME      NULL,
    [ENDDATE]         DATETIME      NULL,
    [NAME]            NVARCHAR (20) NULL,
    CONSTRAINT [CFT_GROUPEVENT_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [stage].[CFT_MATINGEVENT]...';


GO
CREATE TABLE [stage].[CFT_MATINGEVENT] (
    [ID]              NVARCHAR (36) NOT NULL,
    [CREATE_DATE]     DATETIME      NOT NULL,
    [LAST_UPDATE]     DATETIME      NOT NULL,
    [CREATED_BY]      BIGINT        NOT NULL,
    [LAST_UPDATED_BY] BIGINT        NOT NULL,
    [DELETED_BY]      BIGINT        NOT NULL,
    [PARITYEVENTID]   NVARCHAR (36) NULL,
    [MATINGDATE]      DATETIME      NULL,
    [MATINGHOUR]      INT           NULL,
    [BREEDERID]       NVARCHAR (36) NULL,
    [SEMENID]         NVARCHAR (36) NULL,
    [CYCLE]           INT           NULL,
    [MATINGNBR]       INT           NULL,
    [STATUS]          NVARCHAR (1)  NULL,
    [MATINGTHOUSDATE] NVARCHAR (10) NULL,
    [SYNCSTATUS]      NVARCHAR (20) NULL,
    [BREEDINGNBR]     INT           NULL,
    [UPDATESCALC]     NVARCHAR (1)  NULL,
    [MFSYNC]          NVARCHAR (1)  NULL,
    [DataStoreID]     BIGINT        NULL,
    CONSTRAINT [CFT_MATINGEVENT_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [stage].[CFT_PARITYEVENT]...';


GO
CREATE TABLE [stage].[CFT_PARITYEVENT] (
    [ID]              NVARCHAR (36) NOT NULL,
    [CREATE_DATE]     DATETIME      NOT NULL,
    [LAST_UPDATE]     DATETIME      NOT NULL,
    [CREATED_BY]      BIGINT        NOT NULL,
    [LAST_UPDATED_BY] BIGINT        NOT NULL,
    [DELETED_BY]      BIGINT        NOT NULL,
    [ANIMALID]        NVARCHAR (36) NULL,
    [PARITYNBR]       INT           NULL,
    [PARITYDATE]      DATETIME      NULL,
    [HEATCHECKDATE]   DATETIME      NULL,
    [HEATCHECKRESULT] INT           NULL,
    [ENDDATE]         DATETIME      NULL,
    [GROUPID]         NVARCHAR (36) NULL,
    [DUEDATE]         DATETIME      NULL,
    [EXPSERVICEDATE]  DATETIME      NULL,
    [MFSYNC]          NVARCHAR (1)  NULL,
    CONSTRAINT [CFT_PARITYEVENT_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [stage].[CFT_TRANSFERS]...';


GO
CREATE TABLE [stage].[CFT_TRANSFERS] (
    [ID]                NVARCHAR (36) NOT NULL,
    [CREATE_DATE]       DATETIME      NOT NULL,
    [LAST_UPDATE]       DATETIME      NOT NULL,
    [CREATED_BY]        BIGINT        NOT NULL,
    [LAST_UPDATED_BY]   BIGINT        NOT NULL,
    [DELETED_BY]        BIGINT        NOT NULL,
    [ANIMALID]          NVARCHAR (36) NULL,
    [SOURCEFARMID]      NVARCHAR (36) NULL,
    [DESTINATIONFARMID] NVARCHAR (36) NULL,
    [TRANSFERDATE]      DATETIME      NULL,
    [REASONID]          INT           NULL,
    [SYNCSTATUS]        NVARCHAR (20) NULL,
    [DataStoreID]       BIGINT        NULL,
    CONSTRAINT [CFT_TRANSFERS_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Altering [stage].[vw_MatingEvent]...';


GO
ALTER VIEW 
    stage.vw_MatingEvent 
AS
SELECT
	MatingEventKey		=	ISNULL( me.MatingEventKey, 0 )
  , ParityEventKey		=   pe.ParityEventKey
  , EventDateKey		=	CAST( CONVERT( varchar(08), m.eventdate, 112 ) AS int )
  , MaleGeneticsKey		=	CAST( ISNULL( g.GeneticsKey, -1 ) AS bigint )
  , MatingGroupKey		=	CAST( ISNULL( mg.MatingGroupKey, -1 ) AS bigint )
  , ObserverKey			=	CAST( ISNULL( o.ObserverKey, -1 ) AS bigint ) 
  , TimeOfDayCode		=	CASE m.time_of_day 
								WHEN 'P' THEN 2 
								ELSE 1 
							END 
  , SourceCode			=	CASE 
								WHEN m.UDF068060 IS NOT NULL THEN N'MobileFrame / TIM ' 
								ELSE 'PigCHAMP'
							END
  , SourceID			=	m.event_id
  , SourceGUID			=	m.SourceGUID

FROM 
	stage.EV_MATINGS AS m
INNER JOIN 
	dimension.Farm AS farm
		on farm.SourceID = m.site_id
LEFT OUTER JOIN
	dimension.MatingGroup AS mg
		ON mg.FarmKey = farm.FarmKey
			AND mg.MatingGroup = m.service_group
LEFT OUTER JOIN 
	stage.BH_IDENTITY_HISTORY AS bih 
		ON bih.identity_id = m.male_identity_id
LEFT OUTER JOIN
	dimension.Genetics AS g 
		ON g.GeneticsName = bih.primary_identity
LEFT OUTER JOIN 
	dimension.Observer AS o 
		ON o.SourceID = m.supervisor_id
LEFT OUTER JOIN
	fact.MatingEvent AS me
		ON me.SourceID = m.event_id
CROSS APPLY( 
	SELECT TOP 1 
		ParityEventKey 
	FROM 
		fact.ParityEvent AS pe
	
	INNER JOIN 
		dimension.Animal AS a 
			ON a.AnimalKey = pe.AnimalKey 
	WHERE 
		a.SourceID = m.identity_id
			AND CAST( CONVERT( varchar(08), m.eventdate, 112 ) AS INT ) >= pe.ParityDateKey
	ORDER BY 
        pe.ParityNumber DESC ) AS pe
;
GO
PRINT N'Altering [stage].[vw_MatingGroup]...';


GO
ALTER VIEW 
    stage.vw_MatingGroup
AS
SELECT
	MatingGroupKey	=	ISNULL( mGroup.MatingGroupKey, 0 )
  , FarmKey			=	farm.FarmKey
  , MatingGroup		=	CAST( mEvent.service_group AS nvarchar(20) ) 
  , StartDateKey	=	CAST( CONVERT( varchar(08), MIN( mEvent.eventdate ), 112 ) AS INT ) 
  , SourceCode		=	N'PigCHAMP'
  , SourceID		=	min( mEvent.event_id )
  , SourceGUID		=	min( mEvent.SourceGUID )
FROM 
	stage.EV_MATINGS AS mEvent
INNER JOIN 
	dimension.Farm AS farm
		ON farm.SourceID = mEvent.site_id
LEFT OUTER JOIN 
	dimension.MatingGroup AS mGroup
		ON mGroup.FarmKey = farm.FarmKey
			AND mGroup.MatingGroup = mEvent.service_group
WHERE 
	mEvent.service_group IS NOT NULL
	
GROUP BY 
	ISNULL( mGroup.MatingGroupKey, 0 )
  , farm.FarmKey	
  , mEvent.service_group ;
GO
PRINT N'Creating [stage].[vw_Sow]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW 
    stage.vw_Sow
AS
/*

	View:		stage.vw_Sow
	Author:		ccarson

	Absract:	Transform PigCHAMP data from caredata.HDR_SOW to dimension.Animal

	Rev
	2017-03-27	ccarson		Original

*/
SELECT
    AnimalKey					=   ISNULL( a.AnimalKey, 0 ) 
  , Sex							=	N'F' 
  , SourceID					=   s.identity_id
  , SourceGUID					=	s.SourceGUID
  , GeneticsKey					=   ISNULL( g.GeneticsKey, -1 )          
  , OriginKey					=   ISNULL( o.OriginKey, -1 ) 
  , DateOfBirth					=   s.date_of_birth
  , NewAnimalKey				=	s.ID
  , MobileFrameAnimalEventID	=	CAST( s.UDF044036 AS nvarchar(36) )
  , SourceCode					=	CASE
										WHEN s.UDF044036 IS NULL THEN N'PigCHAMP'
										ELSE N'MobileFrame / TIM'
									END
--  , IsDeleted					=	CASE 
--										WHEN ih.deletion_date IS NULL THEN 0 
--										ELSE 1 
--									END
FROM 
    stage.HDR_SOWS AS s 
LEFT OUTER JOIN
	dimension.Animal AS a 
		ON a.SourceID = s.identity_id
LEFT OUTER JOIN 
	dimension.Genetics AS g 
		ON g.SourceID = s.genetics_id
LEFT OUTER JOIN 
	dimension.Origin AS o 
		ON o.SourceID = s.origin_id ;
--LEFT OUTER JOIN 
--	stage.BH_DELETED_IDENTITY_HISTORY AS ih 
--		ON ih.identity_id = s.identity_id ;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [stage].[vw_CFT_ANIMAL]...';


GO

ALTER VIEW 
    [stage].[vw_CFT_ANIMAL]
AS
SELECT
    ID              =   CAST( a.SourceGUID AS nvarchar(36) ) 
  , BIRTHDATE       =   a.DateOfBirth
  , GENETICSID      =   CAST( ISNULL( g.SourceGUID, CAST( 0x0 AS uniqueidentifier ) ) AS nvarchar(36) ) 
  , SEX             =   a.Sex
  , ORIGIN          =   o.OriginName
  , ORIGINID		=	o.SourceGUID
  , MFSYNC          =	N'Y'

FROM 
    dimension.Animal AS a 
LEFT OUTER JOIN 
	dimension.Genetics AS g
		ON a.GeneticsKey = g.GeneticsKey
INNER JOIN 
    dimension.Origin AS o 
        ON a.OriginKey = o.OriginKey
INNER JOIN 
    stage.Animal AS sa 
        ON sa.AnimalKey = a.AnimalKey ;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_arrival]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_arrival]
AS
SELECT
    ID              =   arrival.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	eType.ID
  , REASONID        =   CAST( -1 AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( arrival.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	arrival.SourceID

FROM 
    fact.ArrivalEvent AS arrival
INNER JOIN 
	dimension.FarmAnimal AS fAnimal
		ON fAnimal.FarmAnimalKey = arrival.FarmAnimalKey
INNER JOIN 
	fact.ParityEvent AS pEvent
		ON pEvent.AnimalKey = fAnimal.AnimalKey
			AND pEvent.ParityNumber = 0 
			AND pEvent.DeletedDate IS NULL
INNER JOIN
	stage.CFT_EVENTTYPE AS eType
		ON eType.EVENTNAME = N'ARRIVAL'
INNER JOIN 
	dimension.Date AS eDate
		ON eDate.DateKey = arrival.EventDateKey
INNER JOIN 
	stage.ArrivalEvent AS stage
		ON stage.ArrivalEventKey = arrival.ArrivalEventKey
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_fallout]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_fallout]
AS
SELECT
    ID              =   fallout.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	eType.ID
  , REASONID        =   CAST( -1 AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( fallout.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	fallout.SourceID

FROM 
    fact.FalloutEvent AS fallout
INNER JOIN 
	stage.ParityEvent AS pEvent
		ON pEvent.ParityEventKey = fallout.ParityEventKey
INNER JOIN
	stage.CFT_EVENTTYPE AS eType
		ON eType.EVENTNAME = N'Abortion'
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = fallout.EventDateKey
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_nurse]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_nurse]
AS
SELECT
    ID              =   nurse.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	eType.ID
  , REASONID        =   CAST( -1 AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( nurse.NurseQuantity AS int )
  , DELETED_BY		=	ISNULL( nurse.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	nurse.SourceID

FROM 
    fact.NurseEvent AS nurse
INNER JOIN 
	stage.ParityEvent AS pEvent
		ON pEvent.ParityEventKey = nurse.ParityEventKey
INNER JOIN
	stage.CFT_EVENTTYPE AS eType
		ON eType.EVENTNAME = N'NURSE ON'
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = nurse.EventDateKey ;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_observedHeat]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_observedHeat]
AS
SELECT
    ID              =   heat.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	eType.ID
  , REASONID		=	CAST( -1 AS INT )
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( heat.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	heat.SourceID

FROM 
    fact.ObservedHeatEvent AS heat
INNER JOIN 
	stage.ParityEvent AS pEvent
		ON pEvent.ParityEventKey = heat.ParityEventKey
INNER JOIN
	stage.CFT_EVENTTYPE AS eType
		ON eType.EVENTNAME = N'Observed Heat'
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = heat.EventDateKey ; 
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_pregnancyExam]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_pregnancyExam]
AS
SELECT
    ID              =   preg.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	testResult.EventID
  , REASONID        =   CAST( -1 AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( preg.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	preg.SourceID

FROM 
    fact.PregnancyExamEvent AS preg
INNER JOIN 
	stage.ParityEvent AS pEvent
		ON pEvent.ParityEventKey = preg.ParityEventKey
INNER JOIN( 
    SELECT  CAST( 1 AS bit), ID 
    FROM    stage.CFT_EVENTTYPE
    WHERE   EVENTTYPE = N'Breed' AND EVENTNAME = N'Preg Test Positive'
    
    UNION 
    SELECT  CAST( 0 AS bit), ID 
    FROM    stage.CFT_EVENTTYPE
    WHERE   EVENTTYPE = N'Breed' AND EVENTNAME = N'Preg Test Negative' ) 
    AS testResult( result, EventID ) 
        ON testResult.result = preg.IsPositive
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = preg.EventDateKey ;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_removal]...';


GO
ALTER VIEW 
    stage.vw_CFT_ANIMALEVENT_removal
AS
SELECT DISTINCT
    ID              =   removal.SourceGUID 
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	CAST( evType.MobileFrameValue AS nvarchar(36) ) 
  , REASONID        =   CAST( evReason.MobileFrameReasonID AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( removal.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	removal.SourceID

FROM 
    fact.RemovalEvent AS removal
INNER JOIN 
	stage.FarmAnimal AS fAnimal
		ON fAnimal.FarmAnimalKey = removal.FarmAnimalKey
INNER JOIN
	dbo.LookupCodes AS evType
        ON evType.LookupCodesKey = removal.RemovalTypeKey
INNER JOIN
	dbo.LookupCodes AS evReason
        ON evReason.LookupCodesKey = removal.RemovalReasonKey
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = removal.EventDateKey
CROSS APPLY( 
	SELECT TOP 1 
		pe.SourceGUID
	FROM 
		fact.ParityEvent AS pe
	WHERE 
		pe.AnimalKey = fAnimal.AnimalKey
			AND removal.EventDateKey > pe.ParityDateKey
			AND pe.DeletedDate IS NULL
	ORDER BY 
        pe.ParityDateKey DESC ) AS pEvent
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_sales]...';


GO
ALTER VIEW 
    stage.vw_CFT_ANIMALEVENT_sales
AS
SELECT
    ID              =   sales.SourceGUID 
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	CAST( evType.MobileFrameValue AS nvarchar(36) ) 
  , REASONID        =   CAST( evReason.MobileFrameReasonID AS int ) 
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( -1 AS INT )
  , DELETED_BY		=	ISNULL( sales.DeletedBy, -1 )
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	sales.SourceID

FROM 
    fact.SalesEvent AS sales
INNER JOIN 
	stage.FarmAnimal AS fAnimal
		ON fAnimal.FarmAnimalKey = sales.FarmAnimalKey
INNER JOIN
    dbo.LookupCodes AS evType
        ON evType.LookupCodesKey = sales.SalesTypeKey
INNER JOIN
	dbo.LookupCodes AS evReason
        ON evReason.LookupCodesKey = Sales.SalesReasonKey
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = sales.EventDateKey
CROSS APPLY( 
	SELECT TOP 1 
		pe.SourceGUID
	FROM 
		fact.ParityEvent AS pe
	WHERE 
		pe.AnimalKey = fAnimal.AnimalKey
			AND sales.EventDateKey > pe.ParityDateKey
			AND pe.DeletedDate IS NULL
	ORDER BY 
        pe.ParityDateKey DESC ) AS pEvent
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_wean]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_wean]
AS
SELECT
    ID              =   wean.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , EVENTTYPEID		=	CAST( eType.MobileFrameValue AS nvarchar(36) )
  , REASONID		=	CAST( -1 AS INT )
  , EVENTDATE		=	eDate.FullDate
  , EVENTTHDATE		=	eDate.PICCycleAndDay
  , QTY				=	CAST( wean.WeanedQuantity AS int )
  , DELETED_BY		=	ISNULL( wean.DeletedBy, -1 ) 
  , SYNCSTATUS		=	N'Valid'
  , SourceID		=	wean.SourceID

FROM 
    fact.WeanEvent AS wean
INNER JOIN 
	stage.ParityEvent AS pEvent
		ON pEvent.ParityEventKey = wean.ParityEventKey
INNER JOIN
	dbo.LookupCodes AS eType
		ON eType.LookupCodesKey = wean.WeanEventTypeKey
INNER JOIN
	dimension.Date AS eDate
		ON eDate.DateKey = wean.EventDateKey ;
GO
PRINT N'Creating [stage].[vw_CFT_FARROWEVENT]...';


GO


CREATE VIEW 
    [stage].[vw_CFT_FARROWEVENT]
AS
SELECT DISTINCT
    ID              =   fe.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , LOCATIONID		=	loc.SourceGUID
  , BORNALIVE       =	CAST( fe.Liveborn  AS int )
  , STILLBORN       =	CAST( fe.Stillborn AS int )
  , MUMMY           =	CAST( fe.Mummified AS int )
  , FARROWDATE      =	ed.FullDate
  , PIGCHAMP_ID     =	CAST( fe.SourceID as bigint )
  , FARROWTHDATE    =	ed.PICCycleAndDay
  , SYNCSTATUS      =	N'Valid'
  , EVENTNBR		=	CAST( 1 AS INT )
  , DELETED_BY		=	ISNULL( fe.DeletedBy , -1 )
  , SourceID		=	fe.SourceID
  , MFSYNC          =	N'Y'
FROM 
    fact.FarrowEvent AS fe 
INNER JOIN 
	fact.ParityEvent AS pEvent 
		ON pEvent.ParityEventKey = fe.ParityEventKey 
			AND pEvent.DeletedDate IS NULL
INNER JOIN
	dimension.Date AS ed
		ON ed.DateKey = fe.EventDateKey
LEFT OUTER JOIN 
	dimension.Location AS loc 
		ON loc.LocationKey = fe.LocationKey
INNER JOIN 
	stage.FarrowEvent AS stage
		ON stage.FarrowEventKey = fe.FarrowEventKey

;
GO
PRINT N'Creating [stage].[vw_CFT_MATINGEVENT]...';


GO

CREATE VIEW 
    [stage].[vw_CFT_MATINGEVENT]
AS
SELECT
    ID              =   me.SourceGUID
  , PARITYEVENTID	=	pEvent.SourceGUID   
  , MATINGDATE		=	ed.FullDate
  , MATINGHOUR		=	me.TimeOfDayCode
  , BREEDERID		=	o.SourceGUID
  , SEMENID			=	ISNULL( semen.SourceGUID, CAST( CONVERT( uniqueidentifier, 0x0 ) AS nvarchar(36) ) )
  , MATINGNBR		=	CAST( me.MatingNumber AS int )
  , BREEDINGNBR		=	CAST( me.BreedingNumber AS int )
  , STATUS			=	CAST( me.BreedingStatus AS nvarchar(01) )
  , MATINGTHOUSDATE =	ed.PICCycleAndDay
  , DELETED_BY		=	ISNULL( me.DeletedBy, -1 )
  , SYNCSTATUS      =	N'Valid'
  , SourceID		=	me.SourceID
  , MFSYNC          =	N'Y'
FROM 
    fact.MatingEvent AS me
INNER JOIN 
	fact.ParityEvent AS pEvent 
		ON pEvent.ParityEventKey = me.ParityEventKey 
LEFT JOIN 
	dimension.Genetics AS semen
		on semen.GeneticsKey= me.MaleGeneticsKey
INNER JOIN 
	dimension.Observer AS o 
		ON o.ObserverKey = me.ObserverKey
INNER JOIN
	dimension.Date AS ed
		ON ed.DateKey = me.EventDateKey
INNER JOIN 
	stage.MatingEvent AS stage
		ON stage.MatingEventKey = me.MatingEventKey
;
GO
PRINT N'Creating [stage].[vw_CFT_TRANSFERS]...';


GO
CREATE VIEW 
    [stage].[vw_CFT_TRANSFERS]
AS
SELECT
    ID					=   xfer.SourceGUID 
  , ANIMALID			=	remAnimal.SourceGUID 
  , SOURCEFARMID		=	remFarm.SourceGUID
  , DESTINATIONFARMID	=	arrFarm.SourceGUID
  , TRANSFERDATE		=	eDate.FullDate
  , SYNCSTATUS			=	N'Valid'
  , DELETED_BY			=	xfer.DeletedBy

FROM 
    fact.TransferEvent AS xfer
INNER JOIN 
    fact.ArrivalEvent AS arrival 
		ON arrival.ArrivalEventKey = xfer.ArrivalEventKey
INNER JOIN 
	stage.FarmAnimal AS arrFarmAnimal
		ON arrFarmAnimal.FarmAnimalKey = arrival.FarmAnimalKey
INNER JOIN 
	dimension.Farm AS arrFarm
		ON arrFarm.FarmKey = arrFarmAnimal.FarmKey
INNER JOIN 
    fact.RemovalEvent AS removal
		ON removal.RemovalEventKey = xfer.RemovalEventKey
INNER JOIN 
	stage.FarmAnimal AS remFarmAnimal
		ON remFarmAnimal.FarmAnimalKey = removal.FarmAnimalKey
INNER JOIN 
	dimension.Farm AS remFarm
		ON remFarm.FarmKey = remFarmAnimal.FarmKey
INNER JOIN 
	dimension.Animal AS remAnimal
		ON remAnimal.AnimalKey = remFarmAnimal.AnimalKey
INNER JOIN 
	dimension.Date AS eDate
		ON eDate.DateKey = xfer.EventDateKey
;
GO
PRINT N'Altering [stage].[vw_CFT_ANIMALEVENT_all]...';


GO
ALTER VIEW 
    [stage].[vw_CFT_ANIMALEVENT_all]
AS

SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_arrival 

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_fallout

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_nurse 

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_observedHeat

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_pregnancyExam 

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_removal 

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_sales

UNION 
SELECT 
    ID, PARITYEVENTID, EVENTTYPEID, REASONID, EVENTDATE, QTY, DELETED_BY, SYNCSTATUS, EVENTTHDATE
FROM
	stage.vw_CFT_ANIMALEVENT_wean
;
GO
PRINT N'Altering [stage].[vw_EventNumbers]...';


GO

ALTER VIEW 
    [stage].[vw_EventNumbers]
AS
SELECT
	EVENTTYPE	=	EVENTTYPE
  , EVENTID		=	ID
  , EVENTNBR	=	ROW_NUMBER() OVER ( PARTITION BY PARITYEVENTID ORDER BY SourceID ) + 1 
FROM( 
	SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_nurse
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_fallout
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_observedHeat
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_pregnancyExam
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_removal
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_wean
    UNION ALL
    SELECT 
		N'Animal', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_ANIMALEVENT_sales
    UNION ALL
    SELECT 
		N'Mating', ID, PARITYEVENTID, SourceID FROM stage.vw_CFT_MATINGEVENT ) 
	AS Orders( EVENTTYPE, ID, PARITYEVENTID, SourceID ) ;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS( SELECT 1 FROM dbo.CFT_EVENTTYPE ) 
BEGIN
	INSERT INTO
		dbo.CFT_EVENTTYPE( 
			 ID
           , CREATE_DATE
           , LAST_UPDATE
           , CREATED_BY
           , LAST_UPDATED_BY
           , DELETED_BY
           , EVENTNAME
           , EVENTTYPE
           , REASONID
           , STATUS )
	SELECT 
		ID
      , CREATE_DATE
      , LAST_UPDATE
      , CREATED_BY
      , LAST_UPDATED_BY
      , DELETED_BY
      , EVENTNAME
      , EVENTTYPE
      , REASONID
      , STATUS 
	FROM 
		[$(MobileFrameServer)].[$(MobileFrame)].dbo.CFT_EVENTTYPE ;
END


IF NOT EXISTS( SELECT 1 FROM stage.CFT_EVENTTYPE ) 
BEGIN
	INSERT INTO
		stage.CFT_EVENTTYPE( 
			 ID
           , CREATE_DATE
           , LAST_UPDATE
           , CREATED_BY
           , LAST_UPDATED_BY
           , DELETED_BY
           , EVENTNAME
           , EVENTTYPE
           , REASONID
           , STATUS )
	SELECT 
		ID
      , CREATE_DATE
      , LAST_UPDATE
      , CREATED_BY
      , LAST_UPDATED_BY
      , DELETED_BY
      , EVENTNAME
      , EVENTTYPE
      , REASONID
      , STATUS 
	FROM 
		[$(MobileFrameServer)].[$(MobileFrame)].dbo.CFT_EVENTTYPE ;
END



IF NOT EXISTS( SELECT 1 FROM dbo.MobileFrameFarms ) 
BEGIN
	INSERT INTO
		dbo.MobileFrameFarms( site_id, FarmName, ExecuteInitialLoad )
	VALUES( 3, 'C10', 0x0 ) ; 
END


IF NOT EXISTS( SELECT 1 FROM dbo.LookupCodes ) 
BEGIN
	SET IDENTITY_INSERT dbo.LookupCodes ON ; 

	INSERT INTO dbo.LookupCodes( LookupCodesKey, LookupType, LookupCodesDescription, PigChampValue, MobileFrameReasonID, MobileFrameValue )
	VALUES (01, N'Removal Reason',  N'Unspecified',             N'****',    0,      N'67DB0900-500E-492F-847A-C103D2C0E448')
         , (02, N'Removal Reason',  N'After 2nd Time Repeat',   N'1005',    1,      N'949BB9D4-215D-4315-A5AF-F06477E16F9E')
         , (03, N'Removal Reason',  N'Wfi More Than 30 Days',   N'1009',    2,      N'6600A454-DC27-4E3A-B00B-EE43F09CB3AA')
         , (04, N'Removal Reason',  N'Gilt-no Cycle',           N'1013',    3,      N'034B26CD-973A-4B44-86F0-73DA4C6FD549')
         , (05, N'Removal Reason',  N'Heavy Discharge',         N'1011',    4,      N'EAE280E6-C8B5-4B4A-A669-435EF67E15EB')
         , (06, N'Removal Reason',  N'Farrowing Complication',  N'23',      5,      N'924FF5C2-1D53-41F4-8383-4E021871D365')
         , (07, N'Removal Reason',  N'Less Than 2 Bcs',         N'1014',    6,      N'9747A09D-C017-4673-93E3-5F8CE8B83486')
         , (08, N'Removal Reason',  N'Structural Soundness',    N'1002',    7,      N'89D73AD2-3B55-4F42-8F08-3B697C47CC86')
         , (09, N'Removal Reason',  N'Prolapse',                N'56',      8,      N'F55BF028-F18A-464E-AA7C-B0A551837253')
         , (10, N'Removal Reason',  N'Injury - Leg, Body',      N'1003',    9,      N'34DE1CAC-1446-433C-8F2F-4248FA7ED519')
         , (11, N'Removal Reason',  N'Depopulation',            N'16',      10,     N'FDFD6734-76B4-4000-B61F-09230DA6D57F')
         , (12, N'Removal Reason',  N'Gastrointestinal',        N'1004',    11,     N'ED135E83-FEDD-4EE3-8165-0F70AAA26071')
         , (13, N'Removal Reason',  N'Respiratory',             N'59',      12,     N'548C0F3F-106E-4AB6-9764-ADB78ABC9046')
         , (14, N'Removal Reason',  N'Parity',                  N'1001',    13,     N'D8B0E002-C0FE-4EA8-B766-8CE586DF5F36')
         , (15, N'Removal Reason',  N'Poor Underline',          N'1008',    14,     N'9E9A8702-DD4C-43D9-AC7D-11F76B18273C')
         , (16, N'Removal Reason',  N'Low Lifetime Ba',         N'1007',    15,     N'7E7A95D9-A005-4E01-9BFB-D0910FC23D71')
         , (17, N'Removal Reason',  N'Poor Milker',             N'54',      16,     N'5B3E1031-D523-4C5C-8063-A2FB9C5C7C3C')
         , (18, N'Removal Type',    N'Transfer',                N'',        NULL,   N'A1B76076-9C74-4F76-81FE-8A700D121CA5')
         , (19, N'Breed Reason',    N'Abortion',                N'****',    NULL,   N'98A08D4C-8346-458E-A8B2-7F65BC8E3906')
         , (20, N'Removal Type',    N'Cull',                    N'****',    NULL,   N'0DF1E4D5-0023-4E35-9C1D-F661B3222649')
         , (21, N'Removal Type',    N'Death',                   N'****',    NULL,   N'5BED6F3E-EAA6-4FDA-97A4-FA4349F3BF86')
         , (22, N'Removal Type',    N'Euth',                    N'****',    NULL,   N'4844F134-E0E7-4254-B02F-AFDB28CA35ED')
         , (23, N'Removal Reason',  N'Not on inventory',        N'1006',    17,     N'21E957C7-28B9-4859-980C-77C7CB99742A') 
         , (24, N'Wean Type',		N'WEAN',					N'265',		NULL,   N'DD1C4685-D867-4CAE-96B7-0CCBCD237F50') 
         , (25, N'Wean Type',		N'PART WEAN',				N'220',		NULL,   N'B6FE41B2-28D3-48CD-B922-18B173657589') ;
	
	SET IDENTITY_INSERT dbo.LookupCodes OFF ;
END

IF NOT EXISTS( SELECT 1 FROM dimension.Farm WHERE FarmKey = -1 ) 
BEGIN 
    SET IDENTITY_INSERT dimension.Farm ON ; 
    INSERT INTO 
        dimension.Farm( 
            FarmKey
          , IsActive
          , FarmNumber
          , FarmName
          , TattooLength
          , FarmGUID
          , MainSiteID
          , CreatedDate
          , CreatedBy
		  , SourceGUID	
          , SourceID )
    SELECT 
            FarmKey         =   -1
          , IsActive        =   0
          , FarmNumber      =   N''
          , FarmName        =   N'Unknown'
          , TattooLength    =   0 
          , FarmGUID        =   NEWID()
          , MainSiteID      =   -1
          , CreatedDate     =   GETUTCDATE()
          , CreatedBy       =   -1
		  , SourceGUID		=	CAST( CONVERT( uniqueidentifier, 0x0 ) AS nvarchar(36) )
          , SourceID        =   -1 ; 

    SET IDENTITY_INSERT dimension.Farm OFF ; 
END 


IF NOT EXISTS( SELECT 1 FROM dimension.Origin WHERE OriginKey = -1 ) 
BEGIN 
    SET IDENTITY_INSERT dimension.Origin ON ; 
    INSERT INTO 
        dimension.Origin( 
            OriginKey
          , FarmKey
		  , OriginName
          , CreatedDate
          , CreatedBy
		  , SourceGUID
          , SourceID )
    SELECT 
            OriginKey       =   -1
          , FarmKey         =   -1
		  , OriginName		=	N'Unknown'
          , CreatedDate     =   GETUTCDATE()
          , CreatedBy       =   -1
		  , SourceGUID		=	CAST( CONVERT( uniqueidentifier, 0x0 ) AS nvarchar(36) )
          , SourceID        =   -1 ; 
    SET IDENTITY_INSERT dimension.Origin OFF ; 
END 

IF NOT EXISTS( SELECT 1 FROM dimension.Genetics WHERE GeneticsKey = -1 ) 
BEGIN 
    SET IDENTITY_INSERT dimension.Genetics ON ; 
    INSERT INTO 
        dimension.Genetics( 
            GeneticsKey
          , GeneticsName
          , Sex
          , IsDisabled
          , IsSystem
          , GeneticsSynonym
          , CreatedDate
          , CreatedBy
		  , SourceGUID
          , SourceID )
    SELECT 
            GeneticsKey         =   -1
          , GeneticsName        =   N'Unknown'
          , Sex                 =   N''
          , IsDisabled          =   1
          , IsSystem            =   1
          , GeneticsSynonym     =   N''
          , CreatedDate         =   GETUTCDATE()
          , CreatedBy           =   -1
		  , SourceGUID			=	CAST( CONVERT( uniqueidentifier, 0x0 ) AS nvarchar(36) ) 
          , SourceID            =   -1 ; 

    SET IDENTITY_INSERT dimension.Genetics OFF ; 
END 

IF NOT EXISTS( SELECT 1 FROM dimension.Date )
BEGIN
    DECLARE 
        @StartDate  datetime    =   '1970-01-01'
      , @EndDate    datetime    =   '2030-01-01' ;

    WITH numbers AS(
        SELECT 
            N = ROW_NUMBER() OVER( ORDER BY ( SELECT NULL ) )
        FROM 
            sys.sysobjects a , sys.sysobjects b ) 
    INSERT INTO 
        dimension.Date( 
            DateKey
          , FullDate ) 
    SELECT 
        DateKey     = CAST( CONVERT( varchar(08), DATEADD( day, N - 1, @StartDate ), 112 ) AS INT )
      , FullDate    = DATEADD( day, N - 1, @StartDate ) 
    FROM 
        numbers
    WHERE 
        DATEADD( day, N - 1, @StartDate ) < @EndDate ; 
END

IF NOT EXISTS( SELECT 1 FROM stage.LastChangeTrackingVersion )
BEGIN
    INSERT INTO 
        stage.LastChangeTrackingVersion( 
			DatabaseName					
          , LastChangeTrackingVersion		
		  , LastChangeAppliedDate ) 
    VALUES
		( N'PigCHAMP', 0, '1970-01-01' ) 
	  , ( N'CFDataStore', 0, '1970-01-01' ) ; 

END

GO

GO
PRINT N'Update complete.';


GO
